package label_derivation;

import java.util.ArrayList;
import java.util.Map;

public class LabelGenerator {
	
	public boolean isInteger(String string)
	{
		try{
			Integer.parseInt(string);
		}
		catch (NumberFormatException e) {
			return false;
		}
		catch (NullPointerException e) {
			return false;
		}
		return true;
	}
	
	
	public String findTarget(String statement)
	{
		String expression[]=statement.split("\\=");
		return expression[0];
	}
	
	public String[] findOperands(String statement)
	{
		String expression[]=statement.split("\\=");
		String temp=expression[1].replaceAll("[^0-9,a-z,A-Z]", " ");
		String operands[]=temp.split(" ");
		return operands;
	}
	
	
	public void generateLabelForOperands(String operands[], Map<String,Label> static_labels, Map<String,Label> dynamic_labels)
	{
		for(String str:operands)
		{
			if(!str.isEmpty())
			{
				if(static_labels.containsKey(str))
					continue;
				
				if(dynamic_labels.containsKey(str))
					continue;
				
				String owner;
				ArrayList<String> readers = new ArrayList<String>();
				ArrayList<String> writers = new ArrayList<String>();
				
				owner="PC";
				readers.add("*");
				writers.add("");
				
				dynamic_labels.put(str, new Label(owner, readers, writers));
			}
		}
	}
	
	
	public Label labelForAssignment(String statement, Map<String,Label> static_labels, Map<String,Label> dynamic_labels)
	{
		String target=findTarget(statement);
		String operands[]=findOperands(statement);
		
		generateLabelForOperands(operands, static_labels, dynamic_labels);
		
		if(!static_labels.containsKey(target))
		{
			Label new_label=new RWFMOperations().createNewLabel();
			Label target_label=new_label;
			
			for(String operand: operands)
			{
				Label source_label;
				
				if(static_labels.containsKey(operand))
				{
					source_label=static_labels.get(operand);
				}
				else
				{
					source_label=dynamic_labels.get(operand);
				}
				
				target_label=new RWFMOperations().operationRead(source_label, target_label);
			}
			return target_label;
		}
		
		return null;
	}
}
